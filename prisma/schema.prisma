generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id @default(cuid())
  points Int
  expire DateTime?
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  subTitle    String?
  description String?
  href        String     @unique
  image       String?
  // Parent-child relationship
  parentId    Int?
  parent      MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id], onDelete: Cascade)
  children    MenuItem[] @relation("MenuItemToMenuItem")
  // Relation to page data
  pageData    PageData[] @relation("MenuItemToPageData")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([id])
  @@index([title])
  @@index([href])
  @@index([parentId])
}

model PageData {
  id              Int         @id @default(autoincrement())
  title           String      @unique
  subTitle        String?
  sectionType     SectionType
  description     String
  icon            String?
  image1          String?
  image2          String?
  image3          String?
  image4          String?
  image5          String?
  description0    String?
  description1    String?
  description2    String?
  description3    String?
  description4    String?
  description5    String?
  description6    String?
  // Parent-child relationship for nested sections
  parentSectionId Int?
  parentSection   PageData?   @relation("SectionToSection", fields: [parentSectionId], references: [id], onDelete: Cascade)
  sectionChildren PageData[]  @relation("SectionToSection")
  // Link to menu item
  menuItemId      Int?
  menuItem        MenuItem?   @relation("MenuItemToPageData", fields: [menuItemId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([id])
  @@index([title])
  @@index([menuItemId])
  @@index([parentSectionId])
  @@index([sectionType])
}

enum SectionType {
  IMAGE
  PARAGRAPH
  HEADING
  VIDEO
  LINK
}

model User {
  id        String   @unique @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  isBlocked Boolean  @default(false)
  role      UserRole
  createdAt DateTime @default(now())
}

enum UserRole {
  ADMIN
  MOD
}

model isAdminCreated {
  id             Int      @id @default(autoincrement())
  status         Boolean  @default(false)
  isAdminCreated DateTime @default(now())
}
